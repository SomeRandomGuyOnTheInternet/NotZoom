<%- include('partials/header') -%>

<!-- Room Selection -->
<div id="room-selection-container" class="row justify-content-center my-4">
    <div class="col-auto">
        <input id="room-input" class="form-control" type="text" placeholder="Enter Room ID" />
    </div>
    <div class="col-auto">
        <button id="connect-button" class="btn btn-primary">Connect</button>
    </div>
</div>

<!-- Video Conference Section -->
<div id="video-conference" class="row d-none">
    <div id="main-video-container" class="col-lg-9">
        <div id="video-grid" class="row mb-4">
            <div class="col text-center">
                <video id="local-video" class="border w-100" autoplay playsinline muted></video>
            </div>
        </div>
    </div>
    <div id="side-video-container" class="col-lg-3 d-flex">
        <div id="no-participants-message" class="text-center text-muted mt-4">
            <p>No other participants connected.</p>
        </div>
    </div>
</div>

<!-- Control Buttons -->
<div id="control-buttons" class="row justify-content-center static-bottom fixed-bottom bg-body-tertiary p-4 d-none">
    <div class="col-auto pe-0">
        <button id="toggle-video" class="btn btn-lg btn-outline-secondary me-0">
            <i class="bi bi-camera-video"></i>
        </button>
    </div>
    <div class="col-auto">
        <button id="toggle-audio" class="btn btn-lg btn-outline-secondary ms-0">
            <i class="bi bi-mic"></i>
        </button>
    </div>
    <div class="col-auto">
        <button id="disconnect-button" class="btn btn-lg btn-outline-danger">
            <i class="bi bi-x-circle"></i> Disconnect
        </button>
    </div>
</div>
</div>

<script>
    // VARIABLES ===============================================================

    // DOM elements
    const roomSelectionContainer = document.getElementById('room-selection-container');
    const roomInput = document.getElementById('room-input');
    const connectButton = document.getElementById('connect-button');
    const videoConference = document.getElementById('video-conference');
    const mainVideoContainer = document.getElementById('main-video-container');
    const sideVideoContainer = document.getElementById('side-video-container');
    const noParticipantsMessage = document.getElementById('no-participants-message');
    const localVideo = document.getElementById('local-video');
    const controlButtons = document.getElementById('control-buttons');
    const toggleVideoButton = document.getElementById('toggle-video');
    const toggleAudioButton = document.getElementById('toggle-audio');
    const disconnectButton = document.getElementById('disconnect-button');
    const localVideoComponent = document.getElementById('local-video');

    // Connect to signaling server
    const socket = io();
    socket.on("connect", (msg) => {
        toastSuccess("Connected to signaling server.");
    });
    socket.on("error", (err) => {
        toastError("Could not connect to the signaling server.");
        console.error(err);
    });

    // Random
    let isVideoEnabled = true;
    let isAudioEnabled = true;

    const mediaConstraints = {
        audio: true,
        video: true,
    };
    const offerOptions = {
        offerToReceiveVideo: 1,
        offerToReceiveAudio: 1,
    };

    // Peer connections
    var peerConnections = {};

    let localPeerId; // Local client ID
    let localCamStream;
    let localCanvasStream;
    let localScreenStream;
    let rtcPeerConnection; // Connection between the local device and the remote peer.
    let roomId;

    // ICE servers configuration
    const iceServers = {
        iceServers: [
            { urls: 'stun:stun.l.google.com:19302' },
            { urls: 'stun:stun1.l.google.com:19302' },
        ],
    };

    // EVENT LISTENERS ============================================================
    connectButton.addEventListener('click', () => {
        joinRoom(roomInput.value);
    });

    // Toggle video stream
    toggleVideoButton.addEventListener('click', () => {
        isVideoEnabled = !isVideoEnabled;
        localVideo.srcObject.getVideoTracks()[0].enabled = isVideoEnabled;
        toggleVideoButton.innerHTML = isVideoEnabled
            ? '<i class="bi bi-camera-video"></i>'
            : '<i class="bi bi-camera-video-off"></i>';
    });

    // Toggle audio stream
    toggleAudioButton.addEventListener('click', () => {
        isAudioEnabled = !isAudioEnabled;
        localVideo.srcObject.getAudioTracks()[0].enabled = isAudioEnabled;
        toggleAudioButton.innerHTML = isAudioEnabled
            ? '<i class="bi bi-mic"></i>'
            : '<i class="bi bi-mic-mute"></i>';
    });

    // Handle disconnect button click
    disconnectButton.addEventListener('click', () => {
        location.reload();
    });

    // SOCKET EVENT CALLBACKS =====================================================
    socket.on('room_created', async (event) => {
        localPeerId = event.peerId;
        console.log(`Current peer ID: ${localPeerId}`);
        console.log(`Socket event callback: room_created by peer ${localPeerId}, created room ${event.roomId}`);

        toastSuccess(`Room ${event.roomId} created successfully.`);
        await setLocalCamStream(mediaConstraints);
    });

    socket.on('room_joined', async (event) => {
        localPeerId = event.peerId;
        console.log(`Current peer ID: ${localPeerId}`);
        console.log(`Socket event callback: room_joined by peer ${localPeerId}, joined room ${event.roomId}`);

        toastSuccess(`Joined room ${event.roomId} successfully.`);
        await setLocalCamStream(mediaConstraints);
        console.log(`Emit start_call from peer ${localPeerId}`);
        socket.emit('start_call', {
            roomId: event.roomId,
            senderId: localPeerId
        });
    });

    socket.on('start_call', async (event) => {
        const remotePeerId = event.senderId;
        console.log(`Socket event callback: start_call. RECEIVED from ${remotePeerId}`);

        toastSuccess(`Call started with peer ${remotePeerId}.`);
        peerConnections[remotePeerId] = new RTCPeerConnection(iceServers);
        addLocalCamTracks(peerConnections[remotePeerId]);
        peerConnections[remotePeerId].ontrack = (event) => setRemoteCamStream(event, remotePeerId);
        peerConnections[remotePeerId].ontdatachannel = (event) => setRemoteCanvasData(event, remotePeerId);
        peerConnections[remotePeerId].oniceconnectionstatechange = (event) => checkPeerDisconnect(event, remotePeerId);
        peerConnections[remotePeerId].onicecandidate = (event) => sendIceCandidate(event, remotePeerId);
        await createOffer(peerConnections[remotePeerId], remotePeerId);
    });

    socket.on('webrtc_offer', async (event) => {
        console.log(`Socket event callback: webrtc_offer. RECEIVED from ${event.senderId}`);
        const remotePeerId = event.senderId;

        peerConnections[remotePeerId] = new RTCPeerConnection(iceServers);
        console.log(new RTCSessionDescription(event.sdp));
        peerConnections[remotePeerId].setRemoteDescription(new RTCSessionDescription(event.sdp));
        console.log(`Remote description set on peer ${localPeerId} after offer received`);
        addLocalCamTracks(peerConnections[remotePeerId]);

        peerConnections[remotePeerId].ontrack = (event) => setRemoteCamStream(event, remotePeerId);
        peerConnections[remotePeerId].ontdatachannel = (event) => setRemoteCanvasData(event, remotePeerId);
        peerConnections[remotePeerId].oniceconnectionstatechange = (event) => checkPeerDisconnect(event, remotePeerId);
        peerConnections[remotePeerId].onicecandidate = (event) => sendIceCandidate(event, remotePeerId);
        await createAnswer(peerConnections[remotePeerId], remotePeerId);
        toastInfo(`Received and handled WebRTC offer from peer ${remotePeerId}.`);
    });

    socket.on('webrtc_answer', async (event) => {
        console.log(`Socket event callback: webrtc_answer. RECEIVED from ${event.senderId}`);

        console.log(`Remote description set on peer ${localPeerId} after answer received`);
        peerConnections[event.senderId].setRemoteDescription(new RTCSessionDescription(event.sdp));
        console.log(new RTCSessionDescription(event.sdp));
        toastSuccess(`Received and handled WebRTC answer from peer ${event.senderId}.`);
    });

    socket.on('webrtc_ice_candidate', (event) => {
        const senderPeerId = event.senderId;
        console.log(`Socket event callback: webrtc_ice_candidate. RECEIVED from ${senderPeerId}`);

        // ICE candidate configuration
        var candidate = new RTCIceCandidate({
            sdpMLineIndex: event.label,
            candidate: event.candidate,
        });
        peerConnections[senderPeerId].addIceCandidate(candidate);
        toastInfo(`Received ICE candidate from peer ${senderPeerId}.`);
    });

    // FUNCTIONS ==================================================================
    function joinRoom(room) {
        if (room === '') {
            room = "default";
        }

        roomId = room;
        socket.emit('join', { room: room, peerUUID: localPeerId });
        toastInfo(`Attempting to join ${room} room.`);
        showVideoConference();
    }

    function showVideoConference() {
        roomSelectionContainer.classList.add('d-none');
        videoConference.classList.remove('d-none');
        controlButtons.classList.remove('d-none');
    }

    function removeVideoConference() {
        roomSelectionContainer.classList.remove('d-none');
        videoConference.classList.add('d-none');
        controlButtons.classList.add('d-none');
    }

    // Function to display "No participants" message
    function showNoParticipantsMessage() {
        noParticipantsMessage.classList.remove('d-none');
    }

    function removeNoParticipantsMessage() {
        noParticipantsMessage.classList.add('d-none');
    }

    async function setLocalCamStream(mediaConstraints) {
        console.log('Local stream set');
        let stream;
        try {
            stream = await navigator.mediaDevices.getUserMedia(mediaConstraints);
            toastSuccess("Local media stream started successfully.");
        } catch (error) {
            console.error('Could not get user media', error);
            toastError("Failed to start local media stream.");
        }

        localCamStream = stream;
        localVideoComponent.srcObject = stream;
    }

    function addLocalCamTracks(rtcPeerConnection) {
        localCamStream.getTracks().forEach((track) => {
            rtcPeerConnection.addTrack(track, localCamStream);
        });
        console.log("Local tracks added");
        toastInfo("Local tracks added to peer connection.");
    }

    function addCanvasData(rtcPeerConnection) {
        rtcPeerConnection.createDataChannel("canvas");
        console.log("Canvas data added");
        toastInfo("Canvas data added to peer connection.");
    }

    async function createOffer(rtcPeerConnection, remotePeerId) {
        let sessionDescription;
        try {
            sessionDescription = await rtcPeerConnection.createOffer(offerOptions);
            rtcPeerConnection.setLocalDescription(sessionDescription);
        } catch (error) {
            console.error(error);
            toastError("Failed to create WebRTC offer.");
        }

        console.log(`Sending offer from peer ${localPeerId} to peer ${remotePeerId}`);
        socket.emit('webrtc_offer', {
            type: 'webrtc_offer',
            sdp: sessionDescription,
            roomId: roomId,
            senderId: localPeerId,
            receiverId: remotePeerId
        });
        toastInfo(`WebRTC offer sent to peer ${remotePeerId}.`);
    }

    async function createAnswer(rtcPeerConnection, remotePeerId) {
        let sessionDescription;
        try {
            sessionDescription = await rtcPeerConnection.createAnswer(offerOptions);
            rtcPeerConnection.setLocalDescription(sessionDescription);
        } catch (error) {
            console.error(error);
            toastError("Failed to create WebRTC answer.");
        }

        console.log(`Sending answer from peer ${localPeerId} to peer ${remotePeerId}`);
        socket.emit('webrtc_answer', {
            type: 'webrtc_answer',
            sdp: sessionDescription,
            roomId: roomId,
            senderId: localPeerId,
            receiverId: remotePeerId
        });
        toastInfo(`WebRTC answer sent to peer ${remotePeerId}.`);
    }

    function setRemoteCamStream(event, remotePeerId) {
        if (event.track.kind == "video") {
            // Remove "No participants" message if it exists
            if (noParticipantsMessage) {
                removeNoParticipantsMessage();
            }

            // Create a new video element for the remote peer
            const remoteVideoContainer = document.createElement('div');
            remoteVideoContainer.classList.add('remote-video-container', 'mb-3');
            remoteVideoContainer.id = 'remote-video-container_' + remotePeerId;

            const remoteVideo = document.createElement('video');
            remoteVideo.srcObject = event.streams[0];
            remoteVideo.id = 'remotevideo_' + remotePeerId;
            remoteVideo.setAttribute('autoplay', '');
            remoteVideo.setAttribute('playsinline', '');
            remoteVideo.classList.add('border', 'rounded', 'w-100');

            // Add the remote video element to the container
            remoteVideoContainer.appendChild(remoteVideo);

            // Append the container to the side video container
            document.getElementById('side-video-container').appendChild(remoteVideoContainer);

            toastInfo(`Remote video stream added for peer ${remotePeerId}.`);
        }
    }

    function sendIceCandidate(event, remotePeerId) {
        if (event.candidate) {
            console.log(`Sending ICE Candidate from peer ${localPeerId} to peer ${remotePeerId}`);
            socket.emit('webrtc_ice_candidate', {
                senderId: localPeerId,
                receiverId: remotePeerId,
                roomId: roomId,
                label: event.candidate.sdpMLineIndex,
                candidate: event.candidate.candidate,
            });
            toastInfo(`ICE Candidate sent to peer ${remotePeerId}.`);
        }
    }

    function checkPeerDisconnect(event, remotePeerId) {
        let state = peerConnections[remotePeerId].iceConnectionState;
        console.log(`Connection with peer ${remotePeerId}: ${state}`);

        if (state === "failed" || state === "closed" || state === "disconnected") {
            console.log(`Peer ${remotePeerId} has disconnected`);

            // Remove the disconnected remote video
            const videoDisconnected = document.getElementById('remote-video-container_' + remotePeerId);
            if (videoDisconnected) {
                videoDisconnected.remove();
            }

            delete peerConnections[remotePeerId];

            // Check if there are no more remote videos
            if (document.getElementById('side-video-container').children.length === 0) {
                displayNoParticipantsMessage();
            }

            toastInfo(`Peer ${remotePeerId} has disconnected.`);
        }
    }
</script>

<%- include('partials/footer') -%>